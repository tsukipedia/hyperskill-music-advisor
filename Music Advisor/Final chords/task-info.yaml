type: edu
files:
- name: src/advisor/Main.java
  visible: true
  text: |
    package advisor;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    apply plugin: 'java'
    apply plugin: 'application'

    group 'advisor'
    version '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'com.google.code.gson:gson:+'
    }

    jar {
        manifest {
            attributes 'Main-Class' : 'advisor.Main'
        }
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
  learner_created: false
- name: test/MockTokenServer.java
  visible: false
  text: |
    import org.hyperskill.hstest.mocks.web.WebServerMock;

    public class MockTokenServer extends Thread {

        WebServerMock accessServer;

        public MockTokenServer (WebServerMock accessServer) {
            this.accessServer = accessServer;
        }

        @Override
        public void run() {
            accessServer.start();
            accessServer.run();
        }

        public void stopMock() {
            interrupt();
        }
    }
  learner_created: false
- name: test/MusicAdvisorTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.WebServerMock;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;

    @SuppressWarnings("unused")
    public class MusicAdvisorTest extends StageTest<String> {

        private static final String fictiveAuthCode = "123123";
        private static final String fictiveAccessToken = "456456";
        private static final String fictiveRefreshToken = "567567";


        private static final int accessServerPort = 45678;
        private static final int resourceServerPort = 56789;

        private static final String accessServerUrl = "http://127.0.0.1:" + accessServerPort;
        private static final String resourceServerUrl = "http://127.0.0.1:" + resourceServerPort;

        private static final String[] arguments = new String[]{
                "-access",
                accessServerUrl,
                "-resource",
                resourceServerUrl,
                "-page",
                "1"
        };

        private static final String tokenResponse = "{" +
                "\"access_token\":\"" + fictiveAccessToken + "\"," +
                "\"token_type\":\"Bearer\"," +
                "\"expires_in\":3600," +
                "\"refresh_token\":" + "\"" + fictiveRefreshToken + "\"," +
                "\"scope\":\"\"" +
                "}";

        // TODO handle auth code argument to get the token.
        private static final WebServerMock accessServer = new WebServerMock(accessServerPort)
                .setPage("/api/token", tokenResponse);


        private static final String spotifyServerUrl = "https://api\\.spotify\\.com";

        private static final String apiCategoriesResponse = """
            {
                "categories": {
                    "href": "https://api.spotify.com/v1/browse/categories?offset=0&limit=20",
                    "items": [
                        {
                            "href": "https://api.spotify.com/v1/browse/categories/toplists",
                            "icons": [
                                {
                                    "height": 275,
                                    "url": "https://datsnxq1rwndn.cloudfront.net/media/derived/toplists_11160599e6a04ac5d6f2757f5511778f_0_0_275_275.jpg",
                                    "width": 275
                                }
                            ],
                            "id": "toplists",
                            "name": "Top Lists"
                        },
                        {
                            "href": "https://api.spotify.com/v1/browse/categories/mood",
                            "icons": [
                                {
                                    "height": 274,
                                    "url": "https://datsnxq1rwndn.cloudfront.net/media/original/mood-274x274_976986a31ac8c49794cbdc7246fd5ad7_274x274.jpg",
                                    "width": 274
                                }
                            ],
                            "id": "mood",
                            "name": "Super Mood"
                        },
                        {
                            "href": "https://api.spotify.com/v1/browse/categories/party",
                            "icons": [
                                {
                                    "height": 274,
                                    "url": "https://datsnxq1rwndn.cloudfront.net/media/derived/party-274x274_73d1907a7371c3bb96a288390a96ee27_0_0_274_274.jpg",
                                    "width": 274
                                }
                            ],
                            "id": "party",
                            "name": "Party Time"
                        }
                    ],
                    "limit": 20,
                    "next": null,
                    "offset": 0,
                    "previous": null,
                    "total": 3
                }
            }""";


        private static final String apiPlaylistsPartyResponse = """
            {
                "playlists": {
                    "href": "https://api.spotify.com/v1/browse/categories/party/playlists?offset=0&limit=20",
                    "items": [
                        {
                            "collaborative": false,
                            "external_urls": {
                                "spotify": "http://open.spotify.com/user/spotifybrazilian/playlist/4k7EZPI3uKMz4aRRrLVfen"
                            },
                            "href": "https://api.spotify.com/v1/users/spotifybrazilian/playlists/4k7EZPI3uKMz4aRRrLVfen",
                            "id": "4k7EZPI3uKMz4aRRrLVfen",
                            "images": [
                                {
                                    "height": 300,
                                    "url": "https://i.scdn.co/image/bf6544c213532e9650088dfef76c8521093d970e",
                                    "width": 300
                                }
                            ],
                            "name": "Noite Eletronica",
                            "owner": {
                                "external_urls": {
                                    "spotify": "http://open.spotify.com/user/spotifybrazilian"
                                },
                                "href": "https://api.spotify.com/v1/users/spotifybrazilian",
                                "id": "spotifybrazilian",
                                "type": "user",
                                "uri": "spotify:user:spotifybrazilian"
                            },
                            "public": null,
                            "snapshot_id": "PULvu1V2Ps8lzCxNXfNZTw4QbhBpaV0ZORc03Mw6oj6kQw9Ks2REwhL5Xcw/74wL",
                            "tracks": {
                                "href": "https://api.spotify.com/v1/users/spotifybrazilian/playlists/4k7EZPI3uKMz4aRRrLVfen/tracks",
                                "total": 100
                            },
                            "type": "playlist",
                            "uri": "spotify:user:spotifybrazilian:playlist:4k7EZPI3uKMz4aRRrLVfen"
                        },
                        {
                            "collaborative": false,
                            "external_urls": {
                                "spotify": "http://open.spotify.com/user/spotifybrazilian/playlist/4HZh0C9y80GzHDbHZyX770"
                            },
                            "href": "https://api.spotify.com/v1/users/spotifybrazilian/playlists/4HZh0C9y80GzHDbHZyX770",
                            "id": "4HZh0C9y80GzHDbHZyX770",
                            "images": [
                                {
                                    "height": 300,
                                    "url": "https://i.scdn.co/image/be6c333146674440123073cb32c1c8b851e69023",
                                    "width": 300
                                }
                            ],
                            "name": "Festa Indie",
                            "owner": {
                                "external_urls": {
                                    "spotify": "http://open.spotify.com/user/spotifybrazilian"
                                },
                                "href": "https://api.spotify.com/v1/users/spotifybrazilian",
                                "id": "spotifybrazilian",
                                "type": "user",
                                "uri": "spotify:user:spotifybrazilian"
                            },
                            "public": null,
                            "snapshot_id": "V66hh9k2HnLCdzHvtoXPv+tm0jp3ODM63SZ0oISfGnlHQxwG/scupDbKgIo99Zfz",
                            "tracks": {
                                "href": "https://api.spotify.com/v1/users/spotifybrazilian/playlists/4HZh0C9y80GzHDbHZyX770/tracks",
                                "total": 74
                            },
                            "type": "playlist",
                            "uri": "spotify:user:spotifybrazilian:playlist:4HZh0C9y80GzHDbHZyX770"
                        }
                    ],
                    "limit": 20,
                    "next": null,
                    "offset": 0,
                    "previous": null,
                    "total": 2
                }
            }""".replaceAll(spotifyServerUrl, resourceServerUrl);

        private static final String testErrorMessage = "Test unpredictable error message";

        private static final String apiTestErrorResponse = "{\"error\":{\"status\":404,\"message\":\"" + testErrorMessage + "\"}}";

        private static final String apiNewReleasesResponse = """
            {
                "albums": {
                    "href": "https://api.spotify.com/v1/browse/new-releases?offset=0&limit=20",
                    "items": [
                        {
                            "album_type": "single",
                            "artists": [
                                {
                                    "external_urls": {
                                        "spotify": "https://open.spotify.com/artist/2RdwBSPQiwcmiDo9kixcl8"
                                    },
                                    "href": "https://api.spotify.com/v1/artists/2RdwBSPQiwcmiDo9kixcl8",
                                    "id": "2RdwBSPQiwcmiDo9kixcl8",
                                    "name": "Pharrell Williams",
                                    "type": "artist",
                                    "uri": "spotify:artist:2RdwBSPQiwcmiDo9kixcl8"
                                }
                            ],
                            "available_markets": [
                                "AD"
                            ],
                            "external_urls": {
                                "spotify": "https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71"
                            },
                            "href": "https://api.spotify.com/v1/albums/5ZX4m5aVSmWQ5iHAPQpT71",
                            "id": "5ZX4m5aVSmWQ5iHAPQpT71",
                            "images": [
                                {
                                    "height": 640,
                                    "url": "https://i.scdn.co/image/e6b635ebe3ef4ba22492f5698a7b5d417f78b88a",
                                    "width": 640
                                },
                                {
                                    "height": 300,
                                    "url": "https://i.scdn.co/image/92ae5b0fe64870c09004dd2e745a4fb1bf7de39d",
                                    "width": 300
                                },
                                {
                                    "height": 64,
                                    "url": "https://i.scdn.co/image/8a7ab6fc2c9f678308ba0f694ecd5718dc6bc930",
                                    "width": 64
                                }
                            ],
                            "name": "Runnin'",
                            "type": "album",
                            "uri": "spotify:album:5ZX4m5aVSmWQ5iHAPQpT71"
                        },
                        {
                            "album_type": "single",
                            "artists": [
                                {
                                    "external_urls": {
                                        "spotify": "https://open.spotify.com/artist/3TVXtAsR1Inumwj472S9r4"
                                    },
                                    "href": "https://api.spotify.com/v1/artists/3TVXtAsR1Inumwj472S9r4",
                                    "id": "3TVXtAsR1Inumwj472S9r4",
                                    "name": "Drake2",
                                    "type": "artist",
                                    "uri": "spotify:artist:3TVXtAsR1Inumwj472S9r4"
                                }
                            ],
                            "available_markets": [
                                "AD"
                            ],
                            "external_urls": {
                                "spotify": "https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd"
                            },
                            "href": "https://api.spotify.com/v1/albums/0geTzdk2InlqIoB16fW9Nd",
                            "id": "0geTzdk2InlqIoB16fW9Nd",
                            "images": [
                                {
                                    "height": 640,
                                    "url": "https://i.scdn.co/image/d40e9c3d22bde2fbdb2ecc03cccd7a0e77f42e4c",
                                    "width": 640
                                },
                                {
                                    "height": 300,
                                    "url": "https://i.scdn.co/image/dff06a3375f6d9b32ecb081eb9a60bbafecb5731",
                                    "width": 300
                                },
                                {
                                    "height": 64,
                                    "url": "https://i.scdn.co/image/808a02bd7fc59b0652c9df9f68675edbffe07a79",
                                    "width": 64
                                }
                            ],
                            "name": "Sneakin'",
                            "type": "album",
                            "uri": "spotify:album:0geTzdk2InlqIoB16fW9Nd"
                        }
                    ],
                    "limit": 20,
                    "next": null,
                    "offset": 0,
                    "previous": null,
                    "total": 2
                }
            }""".replaceAll(spotifyServerUrl, resourceServerUrl);


        private static final String apiFeaturedPlaylistsResponse = """
            {
                "message": "Monday morning music, coming right up!",
                "playlists": {
                    "href": "https://api.spotify.com/v1/browse/featured-playlists?offset=0&limit=20",
                    "items": [
                        {
                            "collaborative": false,
                            "external_urls": {
                                "spotify": "http://open.spotify.com/user/spotify/playlist/6ftJBzU2LLQcaKefMi7ee7"
                            },
                            "href": "https://api.spotify.com/v1/users/spotify/playlists/6ftJBzU2LLQcaKefMi7ee7",
                            "id": "6ftJBzU2LLQcaKefMi7ee7",
                            "images": [
                                {
                                    "height": 300,
                                    "url": "https://i.scdn.co/image/7bd33c65ebd1e45975bbcbbf513bafe272f033c7",
                                    "width": 300
                                }
                            ],
                            "name": "Monday Morning Mood",
                            "owner": {
                                "external_urls": {
                                    "spotify": "http://open.spotify.com/user/spotify"
                                },
                                "href": "https://api.spotify.com/v1/users/spotify",
                                "id": "spotify",
                                "type": "user",
                                "uri": "spotify:user:spotify"
                            },
                            "public": null,
                            "snapshot_id": "WwGvSIVUkUvGvqjgj/bQHlRycYmJ2TkoIxYfoalWlmIZT6TvsgvGMgtQ2dGbkrAW",
                            "tracks": {
                                "href": "https://api.spotify.com/v1/users/spotify/playlists/6ftJBzU2LLQcaKefMi7ee7/tracks",
                                "total": 245
                            },
                            "type": "playlist",
                            "uri": "spotify:user:spotify:playlist:6ftJBzU2LLQcaKefMi7ee7"
                        },
                        {
                            "collaborative": false,
                            "external_urls": {
                                "spotify": "http://open.spotify.com/user/spotify__sverige/playlist/4uOEx4OUrkoGNZoIlWMUbO"
                            },
                            "href": "https://api.spotify.com/v1/users/spotify__sverige/playlists/4uOEx4OUrkoGNZoIlWMUbO",
                            "id": "4uOEx4OUrkoGNZoIlWMUbO",
                            "images": [
                                {
                                    "height": 300,
                                    "url": "https://i.scdn.co/image/24aa1d1b491dd529b9c03392f350740ed73438d8",
                                    "width": 300
                                }
                            ],
                            "name": "Upp och hoppa!",
                            "owner": {
                                "external_urls": {
                                    "spotify": "http://open.spotify.com/user/spotify__sverige"
                                },
                                "href": "https://api.spotify.com/v1/users/spotify__sverige",
                                "id": "spotify__sverige",
                                "type": "user",
                                "uri": "spotify:user:spotify__sverige"
                            },
                            "public": null,
                            "snapshot_id": "0j9Rcbt2KtCXEXKtKy/tnSL5r4byjDBOIVY1dn4S6GV73EEUgNuK2hU+QyDuNnXz",
                            "tracks": {
                                "href": "https://api.spotify.com/v1/users/spotify__sverige/playlists/4uOEx4OUrkoGNZoIlWMUbO/tracks",
                                "total": 38
                            },
                            "type": "playlist",
                            "uri": "spotify:user:spotify__sverige:playlist:4uOEx4OUrkoGNZoIlWMUbO"
                        }
                    ],
                    "limit": 20,
                    "next": null,
                    "offset": 0,
                    "previous": null,
                    "total": 2
                }
            }""";

        private static final TempWebServerMock resourceServerMock = new TempWebServerMock(resourceServerPort)
                .setPage("/v1/browse/categories", apiCategoriesResponse)
                .setPage("/v1/browse/categories/party/playlists", apiPlaylistsPartyResponse)
                // unpredictable error on toplists request!!!
                .setPage("/v1/browse/categories/toplists/playlists", apiTestErrorResponse)
                .setPage("/v1/browse/new-releases", apiNewReleasesResponse)
                .setPage("/v1/browse/featured-playlists", apiFeaturedPlaylistsResponse);

        private static final MockTokenServer tokenServer = new MockTokenServer(accessServer);
        private static final MockTokenServer resourceServer = new MockTokenServer(resourceServerMock);

        public static void auth(TestedProgram userProgram) {

            Server server = new Server(userProgram, fictiveAuthCode);
            server.start();

            synchronized (accessServer) {
                if (!accessServer.isStarted())
                    tokenServer.start();
            }

            synchronized (resourceServerMock) {
                if (!resourceServerMock.isStarted())
                    resourceServer.start();
            }

            userProgram.goBackground();
            userProgram.execute("auth");

            try {
                server.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (Server.checkResult != null) {
                throw new WrongAnswer(Server.checkResult.getFeedback());
            }

            userProgram.stopBackground();
        }

        private void checkAlbum1(String reply) {
            String album1 = """
                Runnin'
                [Pharrell Williams]
                https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71"""
                .replaceAll(spotifyServerUrl, resourceServerUrl);

            String album2 = """
                Sneakin'
                [Drake2]
                https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd"""
                .replaceAll(spotifyServerUrl, resourceServerUrl);

            if (!reply.contains(album1)) {
                throw new WrongAnswer("Album from page 1 not appeared on \"new\" action");
            }
            if (reply.contains(album2)) {
                throw new WrongAnswer("Album from page 2 appeared on page 1 on \"new\" action");
            }
            if (!reply.contains("---PAGE 1 OF 2---")) {
                throw new WrongAnswer("Something wrong with pagination format. Not found ---PAGE 1 OF 2---");
            }
        }

        private void checkAlbum2(String reply) {
            String album1 = """
                Runnin'
                [Pharrell Williams]
                https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71"""
                .replaceAll(spotifyServerUrl, resourceServerUrl);

            String album2 = """
                Sneakin'
                [Drake2]
                https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd"""
                .replaceAll(spotifyServerUrl, resourceServerUrl);

            if (!reply.contains(album2)) {
                throw new WrongAnswer("Album from page 2 not appeared on \"new\" action");
            }
            if (reply.contains(album1)) {
                throw new WrongAnswer("Album from page 1 appeared on page 2 on \"new\" action");
            }

            if (!reply.contains("---PAGE 2 OF 2---")) {
                throw new WrongAnswer("Something wrong with pagination format. Not found ---PAGE 2 OF 2---");
            }
        }

        private int countAppearances(String str, String findStr) {
            int lastIndex = 0;
            int count = 0;

            while (lastIndex != -1) {
                lastIndex = str.indexOf(findStr, lastIndex);
                if (lastIndex != -1) {
                    count++;
                    lastIndex += findStr.length();
                }
            }
            return count;
        }

        @DynamicTest
        CheckResult testAuth() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            auth(userProgram);

            userProgram.execute("exit");
            userProgram.stop();

            return CheckResult.correct();

        }

        void testNewAlbums(TestedProgram userProgram) {
            userProgram.execute("new");

            String output = userProgram.getOutput();
            checkAlbum1(output);

            userProgram.execute("prev");
            output = userProgram.getOutput();
            if (!output.contains("No more pages")) {
                throw new WrongAnswer("Your output should be `No more pages` on -1 page.");
            }

            userProgram.execute("next");
            output = userProgram.getOutput();
            checkAlbum2(output);

            userProgram.execute("next");
            output = userProgram.getOutput();
            if (!output.contains("No more pages")) {
                throw new WrongAnswer("Your output should be `No more pages` after the last page.");
            }

            userProgram.execute("prev");
            output = userProgram.getOutput();
            checkAlbum1(output);

            userProgram.execute("exit");
        }

        @DynamicTest
        CheckResult testNew() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);
            auth(userProgram);

            if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                return CheckResult.wrong("Access Token is incorrect!");
            }

            testNewAlbums(userProgram);
            testNewAlbums(userProgram);

            userProgram.stop();

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult testCategoriesNextPrev() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);
            auth(userProgram);

            String category1 = "Top Lists";
            String category2 = "Super Mood";
            String category3 = "Party Time";



            userProgram.execute("categories");

            if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                return CheckResult.wrong("An error occurred while retrieving the category list:\n" +
                        "Access token is incorrect!");
            }

            String output = userProgram.getOutput();
            if (!output.contains("---PAGE 1 OF 3---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 1 OF 3---");
            }
            if (countAppearances(output, category1) != 1
                    || countAppearances(output, category2) != 0
                    || countAppearances(output, category3) != 0) {
                return CheckResult.wrong("Something wrong with showing categories and pages.\n" +
                                         "Should include \"" + category1 + "\" once, " +
                                         "exclude \"" + category2 + "\", and \"" + category3 + "\".");
            }

            userProgram.execute("next");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 2 OF 3---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 2 OF 3---");
            }
            if (countAppearances(output, category1) != 0
                    || countAppearances(output, category2) != 1
                    || countAppearances(output, category3) != 0) {
                return CheckResult.wrong("Something wrong with showing categories and pages.\n" +
                                         "Should include \"" + category2 + "\" once, " +
                                         "exclude \"" + category1 + "\", and \"" + category3 + "\".");
            }

            userProgram.execute("next");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 3 OF 3---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 3 OF 3---");
            }
            if (countAppearances(output, category1) != 0
                    || countAppearances(output, category2) != 0
                    || countAppearances(output, category3) != 1) {
                return CheckResult.wrong("Something wrong with showing categories and pages.\n" +
                                         "Should include \"" + category3 + "\" once, " +
                                         "exclude \"" + category1 + "\", and \"" + category2 + "\".");
            }

            userProgram.execute("prev");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 2 OF 3---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 2 OF 3---");
            }
            if (countAppearances(output, category1) != 0
                    || countAppearances(output, category2) != 1
                    || countAppearances(output, category3) != 0) {
                return CheckResult.wrong("Something wrong with showing categories and pages.\n" +
                                         "Should include \"" + category2 + "\" once, " +
                                         "exclude \"" + category1 + "\", and \"" + category3 + "\".");
            }

            userProgram.execute("prev");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 1 OF 3---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 1 OF 3---");
            }
            if (countAppearances(output, category1) != 1
                    || countAppearances(output, category2) != 0
                    || countAppearances(output, category3) != 0) {
                return CheckResult.wrong("Something wrong with showing categories and pages.\n" +
                                         "Should include \"" + category1 + "\" once, " +
                                         "exclude \"" + category2 + "\", and \"" + category3 + "\".");
            }

            userProgram.stop();
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult testFeatured() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);
            auth(userProgram);

            String featured1 =
                    "Monday Morning Mood\n" +
                    "http://open.spotify.com/user/spotify/playlist/6ftJBzU2LLQcaKefMi7ee7"
                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            String featured2 =
                    "Upp och hoppa!\n" +
                    "http://open.spotify.com/user/spotify__sverige/playlist/4uOEx4OUrkoGNZoIlWMUbO"
                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            userProgram.execute("featured");

            if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                return CheckResult.wrong("Access Token is incorrect!");
            }

            String output = userProgram.getOutput();
            if (!output.contains("---PAGE 1 OF 2---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 1 OF 2---");
            }
            if (countAppearances(output, featured1) != 1
                    || countAppearances(output, featured2) != 0) {
                return CheckResult.wrong("Something wrong with showing featured playlists and pages");
            }

            userProgram.execute("next");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 2 OF 2---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 2 OF 2---");
            }
            if (countAppearances(output, featured1) != 0
                    || countAppearances(output, featured2) != 1) {
                return CheckResult.wrong("Something wrong with showing featured playlists and pages");
            }

            userProgram.execute("prev");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 1 OF 2---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 1 OF 2---");
            }
            if (countAppearances(output, featured1) != 1
                    || countAppearances(output, featured2) != 0) {
                return CheckResult.wrong("Something wrong with showing featured playlists and pages");
            }

            userProgram.execute("exit");
            if (!userProgram.isFinished()) {
                userProgram.stop();
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult testPlayList() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);
            auth(userProgram);

            String playlist1 =
                    "Noite Eletronica\n" +
                    "http://open.spotify.com/user/spotifybrazilian/playlist/4k7EZPI3uKMz4aRRrLVfen"
                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            String playlist2 =
                    "Festa Indie\n" +
                    "http://open.spotify.com/user/spotifybrazilian/playlist/4HZh0C9y80GzHDbHZyX770"
                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            userProgram.execute("playlists Party Time");

            if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                return CheckResult.wrong("Access Token is incorrect!");
            }

            String output = userProgram.getOutput();
            if (!output.contains("---PAGE 1 OF 2---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 1 OF 2---");
            }
            if (countAppearances(output, playlist1) != 1
                    || countAppearances(output, playlist2) != 0) {
                return CheckResult.wrong("Something wrong with showing playlists and pages");
            }

            userProgram.execute("next");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 2 OF 2---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 2 OF 2---");
            }
            if (countAppearances(output, playlist1) != 0
                    || countAppearances(output, playlist2) != 1) {
                return CheckResult.wrong("Something wrong with showing playlists and pages");
            }

            userProgram.execute("prev");
            output = userProgram.getOutput();
            if (!output.contains("---PAGE 1 OF 2---")) {
                return CheckResult.wrong("Something wrong with pagination format. Not found ---PAGE 1 OF 2---");
            }
            if (countAppearances(output, playlist1) != 1
                    || countAppearances(output, playlist2) != 0) {
                return CheckResult.wrong("Something wrong with showing playlists and pages");
            }

            userProgram.execute("exit");
            if (!userProgram.isFinished()) {
                userProgram.stop();
            }

            return CheckResult.correct();
        }


        @AfterClass
        public static void afterTest() {
            tokenServer.stopMock();
            resourceServer.stopMock();
        }

    }
  learner_created: false
- name: test/Server.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.output.OutputHandler;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.net.URI;
    import java.net.http.HttpClient;
    import java.net.http.HttpRequest;
    import java.net.http.HttpResponse;
    import java.net.http.HttpTimeoutException;
    import java.time.Duration;

    public class Server extends Thread {

        TestedProgram userProgram;
        private final String fictiveAuthCode;
        public static CheckResult checkResult = null;
        String redirectUri = "";


        public Server(TestedProgram userProgram, String fictiveAuthCode) {
            this.userProgram = userProgram;
            this.fictiveAuthCode = fictiveAuthCode;
        }

        @Override
        public void run() {
            long searchTime = System.currentTimeMillis();

            while (!Thread.interrupted()) {

                if (System.currentTimeMillis() - searchTime > 1000 * 9) {
                    checkResult = CheckResult.wrong("Not found a link with redirect_uri after 9 seconds.");
                    return;
                }

                String out = OutputHandler.getDynamicOutput();
                if (out.contains("redirect_uri=")) {
                    redirectUri = out.split("redirect_uri=")[1];
                    if (redirectUri.contains("&")) {
                        redirectUri = redirectUri.split("&")[0];
                    }
                    if (redirectUri.contains("\n")) {
                        redirectUri = redirectUri.split("\\R")[0];
                    }
                    break;
                }

                try {
                    sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

            try {
                HttpClient client = HttpClient.newBuilder().build();
                HttpRequest emptyRequest = HttpRequest.newBuilder()
                    .uri(URI.create(redirectUri))
                    .timeout(Duration.ofMillis(500))
                    .GET()
                    .build();
                HttpRequest errorRequest = HttpRequest.newBuilder()
                    .uri(URI.create(redirectUri + "?error=access_denied"))
                    .timeout(Duration.ofMillis(500))
                    .GET()
                    .build();
                HttpRequest codeRequest = HttpRequest.newBuilder()
                    .uri(URI.create(redirectUri + "?code=" + fictiveAuthCode))
                    .timeout(Duration.ofMillis(500))
                    .GET()
                    .build();

                System.out.println("Tester: making requests to redirect uri: " + redirectUri);
                HttpResponse<String> badResponse = client.send(emptyRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 1: " + badResponse.body());
                HttpResponse<String> badResponse2 = client.send(errorRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 2: " + badResponse2.body());
                HttpResponse<String> goodResponse = client.send(codeRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 3: " + goodResponse.body());

                if (!badResponse.body().contains("Authorization code not found. Try again.")
                    || !badResponse2.body().contains("Authorization code not found. Try again.")) {
                    checkResult = CheckResult.wrong("You should send to the browser: `Authorization code not found. Try again.` if there is no code.");
                    return;
                }

                if (!goodResponse.body().contains("Got the code. Return back to your program.")) {
                    checkResult = CheckResult.wrong("\"You should send `Got the code. Return back to your program.` \" +\n" +
                        "                        \"if the query contains the code.");
                }
            } catch (HttpTimeoutException e) {
                checkResult = CheckResult.wrong("Not received any response from the server, found in redirect_uri: "
                    + redirectUri);
            } catch (InterruptedException e) {
                checkResult = CheckResult.wrong("Request to " + redirectUri + " was interrupted. " +
                    "Make sure, that you give the right feedback in your browser.");
            } catch (Exception e) {
                System.out.println("Tester: Error: " + e.getMessage());
                checkResult = CheckResult.wrong("Something wrong with the server response.\n" +
                    "Make sure, that you get the right feedback in your browser.");
            }
        }
    }
  learner_created: false
- name: test/TempWebServerMock.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.WebPage;
    import org.hyperskill.hstest.mocks.web.WebServerMock;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.request.HttpRequestParser;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.ServerSocket;
    import java.net.Socket;
    import java.util.HashMap;
    import java.util.Map;

    public class TempWebServerMock extends WebServerMock {

        private static final String DELIM = "/";
        private static final String fictiveAccessToken = "456456";
        private static final String authorizationHeader = "Authorization";

    //    public static void main(String[] args) { // for testing
    //        org.hyperskill.hstest.mocks.web.WebServerMock ws = new org.hyperskill.hstest.mocks.web.WebServerMock(12345);
    //        ws.start();
    //        ws.run();
    //    }

        private ServerSocket serverSocket;
        private final Map<String, String> pages = new HashMap<>();
        private final int port;

        private boolean isStarted = false;
        private boolean isStopped = false;

        private String access_token = "";

        public TempWebServerMock(int port) {
            super(port);
            this.port = port;
        }

        public TempWebServerMock setPage(String url, String content) {
            return setPage(url, new WebPage().setContent(content));
        }

        public TempWebServerMock setPage(String url, WebPage page) {
            if (!url.startsWith(DELIM)) {
                url = DELIM + url;
            }
            pages.put(url, page.contentWithHeader());
            return this;
        }

        public String getAccess_token() {
            return access_token;
        }

        private void checkRequestHeaders(HttpRequest request) throws WrongAnswer {
            Map<String,String> requestHeaders = request.getHeaders();

            if(requestHeaders.containsKey(authorizationHeader)) {
                if(requestHeaders.get(authorizationHeader).contains(fictiveAccessToken)) {
                    access_token = requestHeaders.get(authorizationHeader);
                }
            }
        }

        private String resolveRequest(DataInputStream input) {
            HttpRequest request = HttpRequestParser.parse(input);
            checkRequestHeaders(request);
            return request != null ? request.getEndpoint() : null;
        }

        private void sendResponse(String path, DataOutputStream output) throws Exception {
            String response;
            if (path == null) {
                response = "Webpage not found!";
            } else {
                if (!path.startsWith(DELIM)) {
                    path = DELIM + path;
                }
                response = pages.getOrDefault(path, "Webpage not found!");
            }
            for (char c : response.toCharArray()) {
                output.write(c);
            }
        }

        private void handle(Socket socket) throws Exception {
            DataInputStream input = new DataInputStream(socket.getInputStream());
            DataOutputStream output = new DataOutputStream(socket.getOutputStream());
            sendResponse(resolveRequest(input), output);
            input.close();
            output.close();
            socket.close();
        }

        public void start() {
            try {
                serverSocket = new ServerSocket(port);
            } catch (IOException ignored) { }
        }

        public void run() {
            try {
                while (serverSocket != null && !serverSocket.isClosed()) {
                    isStarted = true;
                    isStopped = false;
                    handle(serverSocket.accept());
                }
            } catch (Exception ignored) { }
            isStarted = false;
            isStopped = true;
        }

        public void stop() {
            try {
                if (serverSocket != null) {
                    serverSocket.close();
                }
            } catch (IOException ignored) { }
        }

        public boolean isStarted() {
            return isStarted;
        }

        public boolean isStopped() {
            return isStopped;
        }
    }
  learner_created: false
- name: src/advisor/model/PaginatedContent.java
  visible: true
  text: |
    package advisor.model;

    import java.io.IOException;

    public interface PaginatedContent {
        void fetchPage(String accessToken, Integer currentPageFirstIndex) throws IOException, InterruptedException;
    }
  learner_created: true
- name: src/advisor/model/User.java
  visible: true
  text: |
    package advisor.model;

    public class User {
        private String code;
        private Boolean isAuthenticated;

        public User() {
            this.isAuthenticated = false;
        }

        public Boolean isAuthenticated() {
            return isAuthenticated;
        }

        public void setIsAuthenticated(Boolean authentication) {
            isAuthenticated = authentication;
        }

        public String getCode() {
            return code;
        }

        public void setCode(String code) {
            if (code != null) this.code = code;
        }
    }
  learner_created: true
- name: src/advisor/model/PagedCategories.java
  visible: true
  text: |
    package advisor.model;

    import advisor.controller.API;

    import java.io.IOException;

    public class PagedCategories implements PaginatedContent {

        @Override
        public void fetchPage(String accessToken, Integer currentPageFirstIndex) throws IOException, InterruptedException {
            API.getCategories(accessToken, currentPageFirstIndex);
        }
    }
  learner_created: true
- name: src/advisor/view/Printer.java
  visible: true
  text: |
    package advisor.view;

    import advisor.model.Album;
    import advisor.model.Playlist;

    import java.util.HashMap;
    import java.util.List;

    public class Printer {
        public static void printNewReleases(List<Album> newReleases) {
            System.out.println("---NEW RELEASES---");
            for (Album album : newReleases) {
                System.out.println(album.getName());
                System.out.println(album.getArtists().toString());
                System.out.println(album.getLink() + "\n");
            }
        }

        public static void printPlaylists(List<Playlist> playlists) {
            if (playlists == null) return;
            System.out.println("---FEATURED---");
            for (Playlist playlist : playlists) {
                System.out.println(playlist.getName());
                System.out.println(playlist.getLink() + "\n");
            }
        }

        public static void printCategories(List<String> categories) {
            System.out.println("---CATEGORIES---");
            categories.forEach(System.out::println);
        }

        public static void printAuth(String baseUrl) {
            System.out.println(baseUrl + "/authorize?client_id=6623a7ef869f41fc9bbd028c510bfe14&redirect_uri=http://localhost:8080&response_type=code");
        }

        public static void printAuthError() {
            System.out.println("Please, provide access for application.");
        }
    }
  learner_created: true
- name: src/advisor/controller/API.java
  visible: true
  text: |
    package advisor.controller;

    import advisor.model.Playlist;
    import advisor.model.Album;

    import advisor.view.Printer;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;

    import java.io.IOException;
    import java.net.URI;
    import java.net.http.HttpClient;
    import java.net.http.HttpRequest;
    import java.net.http.HttpResponse;
    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;

    public class API {
        private static String baseUrl = "https://accounts.spotify.com";
        private static final HttpClient client = HttpClient.newBuilder().build();;

        private static HashMap<String, String> categories = new HashMap<>();

        private static Integer pageSize = 5;

        public static void setBaseUrl(String url) {
            baseUrl = url;
        }

        public static void setPageSize(String page) {
            pageSize = Integer.parseInt(page);
        }

        public static Integer getPageSize() {
            return pageSize;
        }

        private static void updateCategories(String accessToken) throws IOException, InterruptedException {
            categories = new HashMap<>();
            final String url = baseUrl + "/v1/browse/categories";
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(url))
                    .header("Authorization", "Bearer " + accessToken)
                    .build();

            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

            JsonObject responseJSON = JsonParser.parseString(response.body()).getAsJsonObject();
            JsonObject categoriesObject = responseJSON.getAsJsonObject("categories");
            JsonArray categoriesArray = categoriesObject.getAsJsonArray("items");

            for (JsonElement item : categoriesArray) {
                JsonObject categoryObject = item.getAsJsonObject();
                String id = categoryObject.get("id").getAsString();
                String name = categoryObject.get("name").getAsString();

                categories.put(name, id);
            }
        }

        public static void getCategories(String accessToken, Integer currentPageFirstIndex) throws IOException, InterruptedException {
            List<String> categories = new ArrayList<>();
            final String url = baseUrl + "/v1/browse/categories?limit=" + pageSize + "&offset=" + currentPageFirstIndex;
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(url))
                    .header("Authorization", "Bearer " + accessToken)
                    .build();

            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

            JsonObject responseJSON = JsonParser.parseString(response.body()).getAsJsonObject();
            JsonObject categoriesObject = responseJSON.getAsJsonObject("categories");
            JsonArray categoriesArray = categoriesObject.getAsJsonArray("items");

            for (JsonElement item : categoriesArray) {
                JsonObject categoryObject = item.getAsJsonObject();
                String name = categoryObject.get("name").getAsString();

                categories.add(name);
            }

            Printer.printCategories(categories);
        }

        public static void getFeaturedPlaylists(String accessToken, Integer currentPageFirstIndex) throws IOException, InterruptedException {
            List<Playlist> featured = new ArrayList<>();

            final String url = baseUrl + "/v1/browse/featured-playlists?limit=" + pageSize + "&offset=" + currentPageFirstIndex;
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(url))
                    .header("Authorization", "Bearer " + accessToken)
                    .build();
            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

            JsonObject responseJSON = JsonParser.parseString(response.body()).getAsJsonObject();
            JsonObject playlistsObject = responseJSON.getAsJsonObject("playlists");
            JsonArray playlistsArray = playlistsObject.getAsJsonArray("items");

            for (JsonElement item : playlistsArray) {
                JsonObject playlistObject = item.getAsJsonObject();
                String id = playlistObject.get("id").getAsString();
                String name = playlistObject.get("name").getAsString();
                String link = playlistObject.getAsJsonObject("external_urls").get("spotify").getAsString();
                featured.add(new Playlist(id, name, link));
            }

            Printer.printPlaylists(featured);
        }

        public static void getNewReleases(String accessToken, Integer currentPageFirstIndex) throws IOException, InterruptedException {
            List<Album> newReleases = new ArrayList<>();
            final String url = baseUrl + "/v1/browse/new-releases?limit=" + pageSize + "&offset=" + currentPageFirstIndex;
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(url))
                    .header("Authorization", "Bearer " + accessToken)
                    .build();

            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

            JsonObject responseJSON = JsonParser.parseString(response.body()).getAsJsonObject();
            JsonObject releasesObject = responseJSON.getAsJsonObject("albums");
            JsonArray releasesArray = releasesObject.getAsJsonArray("items");

            for (JsonElement item : releasesArray) {
                List<String> artists = new ArrayList<>();
                JsonObject albumObject = item.getAsJsonObject();

                String id = albumObject.get("id").getAsString();
                String name = albumObject.get("name").getAsString();
                String link = albumObject.getAsJsonObject("external_urls").get("spotify").getAsString();

                JsonArray artistsArray =  albumObject.getAsJsonArray("artists");
                for (JsonElement artist : artistsArray) {
                    JsonObject artistObject = artist.getAsJsonObject();
                    String artistName = artistObject.get("name").getAsString();
                    artists.add(artistName);
                }
                newReleases.add(new Album(id, name, artists, link));
            }

            Printer.printNewReleases(newReleases);
        }

        public static void getPlaylistsByCategory(String accessToken, String categoryName, Integer currentPageFirstIndex) throws IOException, InterruptedException {
            List<Playlist> playlists = new ArrayList<>();
            updateCategories(accessToken);
            if (!categories.containsKey(categoryName)) {
                System.out.println("Unknown category name.");
                return;
            }
            String categoryId = categories.get(categoryName);

            final String url = baseUrl + "/v1/browse/categories/" + categoryId + "/playlists?limit=" + pageSize + "&offset=" + currentPageFirstIndex;
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(url))
                    .header("Authorization", "Bearer " + accessToken)
                    .build();

            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
            try {
                JsonObject responseJSON = JsonParser.parseString(response.body()).getAsJsonObject();
                JsonObject playlistsObject = responseJSON.getAsJsonObject("playlists");
                JsonArray playlistsArray = playlistsObject.getAsJsonArray("items");

                for (JsonElement item : playlistsArray) {
                    JsonObject playlistObject = item.getAsJsonObject();
                    String id = playlistObject.get("id").getAsString();
                    String name = playlistObject.get("name").getAsString();
                    String link = playlistObject.getAsJsonObject("external_urls").get("spotify").getAsString();
                    playlists.add(new Playlist(id, name, link));
                }

                Printer.printPlaylists(playlists);
            } catch (NullPointerException npe) {
                System.out.println("Error in server response. " + response.body());
            }
        }

    }
  learner_created: true
- name: src/advisor/controller/InputReader.java
  visible: true
  text: |
    package advisor.controller;

    import advisor.controller.Authentication;
    import advisor.controller.API;
    import advisor.model.*;
    import advisor.view.Printer;

    import java.io.IOException;
    import java.util.HashMap;
    import java.util.List;

    public class Reader {
        private static User user = new User();
        private static String accessToken = "";
        private static PaginatedContent currentContent;
        private static Integer currentPageFirstIndex = 0;

        public static void evaluateUserInput(String input) throws IOException, InterruptedException {

            if (!input.equals("auth") && !user.isAuthenticated()) {
                Printer.printAuthError();
                return;
            }

            switch (input) {
                case "auth" -> {
                    Authentication auth = new Authentication();
                    String authCode = auth.getAccess(user);
                    user.setCode(authCode);
                    user.setIsAuthenticated(true);
                    accessToken = Authentication.getAccessToken(user);
                    System.out.println("---SUCCESS---");
                }
                case "featured" -> {
                    currentContent = new PagedFeaturedPlaylists();
                    currentContent.fetchPage(accessToken, currentPageFirstIndex);
                }
                case "new" -> {
                    currentContent = new PagedReleases();
                    currentContent.fetchPage(accessToken, currentPageFirstIndex);
                }
                case "categories" -> {
                    currentContent = new PagedCategories();
                    currentContent.fetchPage(accessToken, currentPageFirstIndex);
                }
                case "prev" -> {
                    currentPageFirstIndex -= API.getPageSize();
                    if (currentPageFirstIndex < 0) {
                        currentPageFirstIndex = 0;
                        System.out.println("You are already on the first page.");
                    } else {
                        currentContent.fetchPage(accessToken, currentPageFirstIndex);
                    }
                }
                case "next" -> {
                    currentPageFirstIndex += API.getPageSize();
                    currentContent.fetchPage(accessToken, currentPageFirstIndex);
                }
                default -> {
                    if (input.contains("playlists")) {
                        String categoryName = input.replace("playlists ", "");
                        currentContent = new PagedCategoryPlaylists(categoryName);
                        currentContent.fetchPage(accessToken, currentPageFirstIndex);
                    } else {
                        System.out.println("Error: Invalid command.");
                    }
                }
            }
        }
    }
  learner_created: true
- name: src/advisor/Authentication.java
  visible: true
  text: |
    package advisor.controller;

    import advisor.view.Printer;
    import advisor.model.User;

    import com.sun.net.httpserver.HttpExchange;
    import com.sun.net.httpserver.HttpHandler;
    import com.sun.net.httpserver.HttpServer;

    import java.io.IOException;
    import java.net.InetSocketAddress;
    import java.net.URI;
    import java.net.URLEncoder;
    import java.net.http.HttpClient;
    import java.net.http.HttpRequest;
    import java.net.http.HttpResponse;
    import java.nio.charset.StandardCharsets;
    import java.util.Base64;
    import java.util.concurrent.CountDownLatch;

    public class Authentication {

        private static String baseUrl = "https://accounts.spotify.com";

        private static final String clientId = "6623a7ef869f41fc9bbd028c510bfe14";

        private static final String clientSecret = "a3d6e766165b4e9bb3f0ad88c27742ed";

        public String getAccess(User user) throws IOException, InterruptedException {
            Printer.printAuth(baseUrl);
            CountDownLatch actionManager = new CountDownLatch(1);
            HttpServer server = HttpServer.create();
            server.bind(new InetSocketAddress(8080), 0);
            server.createContext("/",
                    new HttpHandler() {
                        public void handle(HttpExchange exchange) throws IOException {
                            System.out.println("waiting for code...");
                            String query = exchange.getRequestURI().getQuery();
                            String response;
                            int statusCode = 0;
                            if (query != null && query.contains("code")) {
                                System.out.println("code received");
                                user.setCode(query.replace("code=",""));
                                response = "Got the code. Return back to your program.";
                                statusCode = 200;
                                actionManager.countDown();
                            } else {
                                response = "Authorization code not found. Try again.";
                                statusCode = 404;
                            }
                            exchange.sendResponseHeaders(statusCode, response.length());
                            exchange.getResponseBody().write(response.getBytes());
                            exchange.getResponseBody().close();
                        }
                    }
            );
            server.start();
            actionManager.await();
            server.stop(1);

            return user.getCode();
        }

        public static String getAccessToken(User user) throws IOException, InterruptedException {
            HttpClient client = HttpClient.newBuilder().build();
            String uri = "/api/token";
            String body = "grant_type=authorization_code" +
                    "&code=" + URLEncoder.encode(user.getCode(), StandardCharsets.UTF_8) +
                    "&redirect_uri=" + URLEncoder.encode("http://localhost:8080", StandardCharsets.UTF_8);
            String credentials = clientId + ":" + clientSecret;
            String basicAuth = "Basic " + Base64.getEncoder()
                    .encodeToString(credentials.getBytes(StandardCharsets.UTF_8));

            HttpRequest request = HttpRequest.newBuilder()
                    .header("Content-Type", "application/x-www-form-urlencoded")
                    .header("Authorization", basicAuth)
                    .uri(URI.create(baseUrl + uri))
                    .POST(HttpRequest.BodyPublishers.ofString(body))
                    .build();
            System.out.println("making http request for access_token...");

            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

            String responseBody = response.body();
            System.out.println(responseBody);

            int startIndex = responseBody.indexOf("\"access_token\":\"") + "\"access_token\":\"".length();
            int endIndex = responseBody.indexOf("\"", startIndex);
            return responseBody.substring(startIndex, endIndex);
        }

        public static void setBaseUrl(String url) {
            baseUrl = url;
        }

    }
  learner_created: true
- name: src/advisor/model/albums/Album.java
  visible: true
  text: |
    package advisor.model;

    import java.util.List;

    public class Album {
        private String id;
        private String name;
        private List<String> artists;
        private String link;

        public Album(String id, String name, List<String> artists, String link) {
            this.id = id;
            this.name = name;
            this.artists = artists;
            this.link = link;
        }

        public String getId() {
            return id;
        }

        public String getName() {
            return name;
        }

        public List<String> getArtists() {
            return artists;
        }

        public String getLink() {
            return link;
        }
    }
  learner_created: true
- name: src/advisor/model/albums/PagedReleases.java
  visible: true
  text: |
    package advisor.model;

    import advisor.controller.API;

    import java.io.IOException;

    public class PagedReleases implements PaginatedContent{
        @Override
        public void fetchPage(String accessToken, Integer currentPageFirstIndex) throws IOException, InterruptedException {
            API.getNewReleases(accessToken, currentPageFirstIndex);
        }
    }
  learner_created: true
- name: src/advisor/model/playlists/Playlist.java
  visible: true
  text: |
    package advisor.model;

    public class Playlist {
        private String id;
        private String name;
        private String link;

        public Playlist(String id, String name, String link) {
            this.id = id;
            this.name = name;
            this.link = link;
        }

        public String getId() {
            return id;
        }

        public String getName() {
            return name;
        }

        public String getLink() {
            return link;
        }
    }
  learner_created: true
- name: src/advisor/model/playlists/PagedCategoryPlaylists.java
  visible: true
  text: |
    package advisor.model;

    import advisor.controller.API;

    import java.io.IOException;

    public class PagedCategoryPlaylists implements PaginatedContent {
        private final String categoryName;

        public PagedCategoryPlaylists(String categoryName) {
            this.categoryName = categoryName;
        }

        @Override
        public void fetchPage(String accessToken, Integer currentPageFirstIndex) throws IOException, InterruptedException {
            API.getPlaylistsByCategory(accessToken, this.categoryName, currentPageFirstIndex);
        }
    }
  learner_created: true
- name: src/advisor/model/playlists/PagedFeaturedPlaylists.java
  visible: true
  text: |
    package advisor.model;

    import advisor.controller.API;

    import java.io.IOException;

    public class PagedFeaturedPlaylists implements PaginatedContent {
        @Override
        public void fetchPage(String accessToken, Integer currentPageFirstIndex) throws IOException, InterruptedException {
            API.getFeaturedPlaylists(accessToken, currentPageFirstIndex);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5481#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Mon, 03 Jul 2023 21:37:37 UTC"
record: -1
